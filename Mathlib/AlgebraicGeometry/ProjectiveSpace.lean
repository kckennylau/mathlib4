/-
Copyright (c) 2025 Kenny Lau. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kenny Lau
-/

import Mathlib.AlgebraicGeometry.AffineSpace
import Mathlib.AlgebraicGeometry.ProjectiveSpectrum.Proper
import Mathlib.RingTheory.MvPolynomial.Homogeneous

/-!
# Projective space

## Main definitions

- `AlgebraicGeometry.ProjectiveSpace`: `‚Ñô(n; S)` is the projective `n`-space over `S`.
-/

/-
TODO:
- `AlgebraicGeometry.ProjectiveSpace.SpecIso`: `‚Ñô(n; Spec R) ‚âÖ Proj R[n]`
- `AlgebraicGeometry.ProjectiveSpace.openCover`: the canonical cover of `‚Ñô(n; S)` by `n` affine
  charts. The `i`·µó ∞ chart is `ùî∏({k // k ‚â† i}; S) ‚ü∂ ‚Ñô(n; S)`, and represents the open set where
  the function `X·µ¢` does not vanish.
- Functoriality.
-/

universe v w u

open CategoryTheory Limits MvPolynomial HomogeneousLocalization

noncomputable section

namespace AlgebraicGeometry

variable (n : Type u) (S : Scheme.{u})

attribute [local instance] gradedAlgebra

/-- `‚Ñô(n; S)` is the projective `n`-space over `S`.
Note that `n` is an arbitrary index type (e.g. `Fin m`). -/
def ProjectiveSpace (n : Type u) (S : Scheme.{u}) : Scheme.{max u v} :=
  pullback (terminal.from S) (terminal.from (Proj (homogeneousSubmodule n (ULift.{max u v} ‚Ñ§))))

@[inherit_doc] scoped notation "‚Ñô("n"; "S")" => ProjectiveSpace n S

namespace ProjectiveSpace

@[simps -isSimp]
instance over : ‚Ñô(n; S).CanonicallyOver S where
  hom := pullback.fst _ _

/-- The map from the projective `n`-space over `S` to the integral model `Proj ‚Ñ§[n]`. -/
def toProjMvPoly : ‚Ñô(n; S) ‚ü∂ Proj (homogeneousSubmodule n (ULift.{max u v} ‚Ñ§)) := pullback.snd ..

end ProjectiveSpace

end AlgebraicGeometry
