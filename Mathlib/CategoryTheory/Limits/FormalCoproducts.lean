/-
Copyright (c) 2025 Kenny Lau. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou, Kenny Lau
-/

import Mathlib.CategoryTheory.Limits.Opposites
import Mathlib.CategoryTheory.Limits.Preserves.Shapes.Products
import Mathlib.CategoryTheory.Limits.Shapes.Products
import Mathlib.CategoryTheory.Limits.Shapes.Pullback.HasPullback
import Mathlib.CategoryTheory.Limits.Shapes.Terminal

/-!
# Formal Coproducts

In this file we construct the category of formal coproducts given a category.

## Main definitions

* `FormalCoproduct`: the category of formal coproducts, which are indexed sets of objects in a
  category. A morphism `‚àê i : X.I, X.obj i ‚ü∂ ‚àê j : Y.I, Y.obj j` is given by a function
  `f : X.I ‚Üí Y.I` and maps `X.obj i ‚ü∂ Y.obj (f i)` for each `i : X.I`.
* `FormalCoproduct.eval : (C·µí·µñ ‚•§ A) ‚•§ ((FormalCoproduct C)·µí·µñ ‚•§ A)`:
  the universal property that a presheaf on `C` where the target category has arbitrary coproducts,
  can be extended to a presheaf on `FormalCoproduct C`.

-/


universe w w‚ÇÅ w‚ÇÇ w‚ÇÉ v v‚ÇÅ v‚ÇÇ v‚ÇÉ u u‚ÇÅ u‚ÇÇ u‚ÇÉ

open Opposite

namespace CategoryTheory

namespace Limits

variable {C : Type u} [Category.{v} C] (A : Type u‚ÇÅ) [Category.{v‚ÇÅ} A]

variable (C) in
/-- A formal coproduct is an indexed set of objects. -/
structure FormalCoproduct where
  I : Type w
  obj (i : I) : C

namespace FormalCoproduct

structure Hom (X Y : FormalCoproduct.{w} C) where
  f : X.I ‚Üí Y.I
  œÜ (i : X.I) : X.obj i ‚ü∂ Y.obj (f i)

-- this category identifies to the fullsubcategory of the category of
-- presheaves of sets on `C` which are coproducts of representable presheaves
@[simps!] instance category : Category (FormalCoproduct.{w} C) where
  Hom := Hom
  id X := { f := id, œÜ := fun _ ‚Ü¶ ùüô _ }
  comp Œ± Œ≤ := { f := Œ≤.f ‚àò Œ±.f, œÜ := fun _ ‚Ü¶ Œ±.œÜ _ ‚â´ Œ≤.œÜ _ }

@[ext (iff := false)]
lemma hom_ext {X Y : FormalCoproduct.{w} C} {f g : X ‚ü∂ Y} (h‚ÇÅ : f.f = g.f)
    (h‚ÇÇ : ‚àÄ (i : X.I), f.œÜ i ‚â´ eqToHom (by rw [h‚ÇÅ]) = g.œÜ i) : f = g := by
  obtain ‚ü®f, F‚ü© := f
  obtain ‚ü®g, G‚ü© := g
  obtain rfl : f = g := h‚ÇÅ
  obtain rfl : F = G := by ext i; simpa using h‚ÇÇ i
  rfl

lemma hom_ext_iff {X Y : FormalCoproduct.{w} C} (f g : X ‚ü∂ Y) :
    f = g ‚Üî ‚àÉ h‚ÇÅ : f.f = g.f, ‚àÄ (i : X.I), f.œÜ i ‚â´ eqToHom (by rw [h‚ÇÅ]) = g.œÜ i :=
  ‚ü®(¬∑ ‚ñ∏ by simp), fun ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© ‚Ü¶ hom_ext h‚ÇÅ h‚ÇÇ‚ü©

@[simps!] def isoOfComponents {X Y : FormalCoproduct.{w} C} (e : X.I ‚âÉ Y.I)
    (h : ‚àÄ i, X.obj i ‚âÖ Y.obj (e i)) : X ‚âÖ Y where
  hom := { f := e, œÜ := fun i ‚Ü¶ (h i).hom }
  inv := { f := e.symm, œÜ := fun i ‚Ü¶ eqToHom (by simp) ‚â´ (h (e.symm i)).inv }
  hom_inv_id := by ext <;> aesop
  inv_hom_id := by ext <;> aesop

variable (C) in
@[simps!] def of : C ‚•§ FormalCoproduct.{w} C where
  obj X := ‚ü®PUnit, fun _ ‚Ü¶ X‚ü©
  map f := ‚ü®fun _ ‚Ü¶ PUnit.unit, fun _ ‚Ü¶ f‚ü©

-- This is probably some form of adjunction.
@[simps!] def ofHomEquiv (X : C) (Y : FormalCoproduct.{w} C) :
    ((of C).obj X ‚ü∂ Y) ‚âÉ (i : Y.I) √ó (X ‚ü∂ Y.obj i) where
  toFun f := ‚ü®f.f PUnit.unit, f.œÜ PUnit.unit‚ü©
  invFun f := ‚ü®fun _ ‚Ü¶ f.fst, fun _ ‚Ü¶ f.snd‚ü©
  left_inv f := hom_ext rfl (by simp)
  right_inv f := Sigma.ext rfl (by simp)

instance : (of C).FullyFaithful where
  preimage f := f.œÜ PUnit.unit

@[simps!] def coproduct (ùíú : Type w) (f : ùíú ‚Üí FormalCoproduct.{w} C) :
    ColimitCocone (Discrete.functor f) where
  cocone := {
    pt := ‚ü®(i : ùíú) √ó (f i).I, fun p ‚Ü¶ (f p.1).obj p.2‚ü©
    Œπ := {
      app i := ‚ü®fun j ‚Ü¶ ‚ü®i.as, j‚ü©, fun j ‚Ü¶ ùüô ((f i.as).obj j)‚ü©,
      naturality := by rintro ‚ü®i‚ü© ‚ü®j‚ü© ‚ü®‚ü®f‚ü©‚ü©; cases f; rfl
    }
  }
  isColimit := {
    desc s := ‚ü®fun p ‚Ü¶ (s.Œπ.app ‚ü®p.1‚ü©).f p.2, fun p ‚Ü¶ (s.Œπ.app ‚ü®p.1‚ü©).œÜ p.2‚ü©
    uniq s m h := hom_ext (funext fun p ‚Ü¶ congr_fun (congr_arg Hom.f (h ‚ü®p.1‚ü©)) p.2)
      fun p ‚Ü¶ by obtain ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© := (hom_ext_iff _ _).1 (h ‚ü®p.1‚ü©); simpa using h‚ÇÇ p.2
    fac s i := hom_ext (by ext; simp) (by simp)
  }

instance : HasCoproducts.{w} (FormalCoproduct.{w} C) := by
  refine fun ùíú ‚Ü¶ ‚ü®fun f ‚Ü¶ ‚ü®‚ü®?_‚ü©‚ü©‚ü©
  convert coproduct ùíú (f.obj ‚àò Discrete.mk)
  exact Functor.ext (fun i ‚Ü¶ rfl) (fun ‚ü®i‚ü© ‚ü®j‚ü© ‚ü®‚ü®f‚ü©‚ü© ‚Ü¶ by cases f; simp)

@[simps!] noncomputable def coproductIsoCoproduct {J : Type w} (f : J ‚Üí FormalCoproduct.{w} C) :
    (‚àê fun i : J ‚Ü¶ f i) ‚âÖ (coproduct J f).cocone.pt :=
  colimit.isoColimitCocone (coproduct _ _)

@[simps!] def coproductCoconeIsoSelf (X : FormalCoproduct.{w} C) :
    (coproduct X.I ((of C).obj ‚àò X.obj)).cocone.pt ‚âÖ X :=
  isoOfComponents (Equiv.sigmaPUnit X.I) fun i ‚Ü¶ Iso.refl (X.obj i.fst)

@[simps!] noncomputable def coproductIsoSelf (X : FormalCoproduct.{w} C) :
    ‚àê (of C).obj ‚àò X.obj ‚âÖ X :=
  coproductIsoCoproduct _ ‚â™‚â´ coproductCoconeIsoSelf X

@[simp] lemma comp_coproductIsoSelf (X : FormalCoproduct.{w} C) (i : X.I) :
    Sigma.Œπ _ i ‚â´ (coproductIsoSelf X).hom = (ofHomEquiv _ _).symm ‚ü®i, ùüô (X.obj i)‚ü© :=
  (colimit.isoColimitCocone_Œπ_hom_assoc _ _ _).trans (by ext <;> simp [ofHomEquiv])

noncomputable
instance [HasTerminal C] (X : FormalCoproduct.{w} C) : Unique (X ‚ü∂ (of C).obj (‚ä§_ C)) :=
  ‚ü®‚ü®‚ü®fun _ ‚Ü¶ PUnit.unit, fun _ ‚Ü¶ terminal.from _‚ü©‚ü©,
  fun j ‚Ü¶ hom_ext (funext fun _ ‚Ü¶ rfl) (by aesop)‚ü©

instance [HasTerminal C] : HasTerminal (FormalCoproduct.{w} C) :=
  (IsTerminal.ofUnique <| (of C).obj (‚ä§_ C)).hasTerminal

noncomputable
def pullback [HasPullbacks C] (X Y Z : FormalCoproduct.{w} C) (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) :
    FormalCoproduct.{w} C :=
  ‚ü®Function.Pullback f.f g.f, fun xy ‚Ü¶
    Limits.pullback (f.œÜ xy.1.1 ‚â´ eqToHom (by rw [xy.2])) (g.œÜ xy.1.2)‚ü©

@[simps!] noncomputable
def pullbackCone [HasPullbacks C] (X Y Z : FormalCoproduct.{w} C)
    (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) : PullbackCone f g :=
  .mk (W := pullback X Y Z f g)
    ‚ü®fun i ‚Ü¶ i.1.1, fun i ‚Ü¶ pullback.fst _ _‚ü©
    ‚ü®fun i ‚Ü¶ i.1.2, fun i ‚Ü¶ pullback.snd _ _‚ü©
    (hom_ext (funext fun i ‚Ü¶ i.2) (by simp [pullback.condition]))

noncomputable def isLimitPullback [HasPullbacks C] (X Y Z : FormalCoproduct.{w} C)
    (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) :
    IsLimit (pullbackCone X Y Z f g) := by
  refine PullbackCone.IsLimit.mk _
    (fun s ‚Ü¶ ‚ü®fun i ‚Ü¶ ‚ü®(s.fst.f i, s.snd.f i), congrFun (congrArg Hom.f s.condition) i‚ü©,
      fun i ‚Ü¶ pullback.lift (s.fst.œÜ i) (s.snd.œÜ i) ?_‚ü©)
    (fun s ‚Ü¶ by ext <;> simp)
    (fun s ‚Ü¶ by ext <;> simp)
    (fun s m h‚ÇÅ h‚ÇÇ ‚Ü¶ ?_)
  ¬∑ obtain ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© := (hom_ext_iff _ _).1 s.condition
    simpa using h‚ÇÇ i
  ¬∑ obtain ‚ü®h‚ÇÅ‚ÇÅ, h‚ÇÅ‚ÇÇ‚ü© := (hom_ext_iff _ _).1 h‚ÇÅ
    obtain ‚ü®h‚ÇÇ‚ÇÅ, h‚ÇÇ‚ÇÇ‚ü© := (hom_ext_iff _ _).1 h‚ÇÇ
    obtain ‚ü®hs‚ÇÅ, hs‚ÇÇ‚ü© := (hom_ext_iff _ _).1 s.condition
    obtain ‚ü®f, œÜ‚ü© := m
    have hf (i) : f i = ‚ü®(s.fst.f i, s.snd.f i), congrFun hs‚ÇÅ i‚ü© :=
      Subtype.ext (Prod.ext (congrFun h‚ÇÅ‚ÇÅ i) (congrFun h‚ÇÇ‚ÇÅ i))
    refine hom_ext (funext hf) (fun i ‚Ü¶ ?_)
    replace hf := hf i
    refine pullback.hom_ext ?_ ?_
    ¬∑ simp only [category_comp_f, category_comp_œÜ, Category.assoc, limit.lift_œÄ,
        PullbackCone.mk_pt, PullbackCone.mk_œÄ_app] at h‚ÇÅ‚ÇÇ ‚ä¢
      convert h‚ÇÅ‚ÇÇ i using 2
      refine eq_of_heq ((eqToHom_comp_heq_iff _ _ _).2 ((heq_comp_eqToHom_iff _ _ _).2 ?_))
      congr 1
      ¬∑ rw [hf]
      ¬∑ rw [hf]
      ¬∑ rw [hf]
      ¬∑ exact (comp_eqToHom_heq_iff _ _ _).2 ((heq_comp_eqToHom_iff _ _ _).2 (by rw [hf]))
      ¬∑ rw [hf]
      ¬∑ generalize_proofs; simp [*]
    ¬∑ simp only [category_comp_f, category_comp_œÜ, Category.assoc, limit.lift_œÄ,
        PullbackCone.mk_pt, PullbackCone.mk_œÄ_app] at h‚ÇÇ‚ÇÇ ‚ä¢
      convert h‚ÇÇ‚ÇÇ i using 2
      refine eq_of_heq ((eqToHom_comp_heq_iff _ _ _).2 ((heq_comp_eqToHom_iff _ _ _).2 ?_))
      congr 1
      ¬∑ rw [hf]
      ¬∑ rw [hf]
      ¬∑ rw [hf]
      ¬∑ exact (comp_eqToHom_heq_iff _ _ _).2 ((heq_comp_eqToHom_iff _ _ _).2 (by rw [hf]))
      ¬∑ rw [hf]
      ¬∑ generalize_proofs; simp [*]


section HasCoproducts

variable [HasCoproducts.{w} A]

variable (C) in
@[simps] noncomputable def eval : (C ‚•§ A) ‚•§ (FormalCoproduct.{w} C ‚•§ A) where
  obj F :=
    { obj X := ‚àê fun (i : X.I) ‚Ü¶ F.obj (X.obj i)
      map {X Y} f := Sigma.desc fun i ‚Ü¶ F.map (f.œÜ i) ‚â´ Sigma.Œπ (F.obj ‚àò Y.obj) (f.f i)
      map_comp _ _ := Sigma.hom_ext _ _ (fun _ ‚Ü¶ by simp [Sigma.Œπ_desc]) }
  map Œ± := { app f := Sigma.map fun i ‚Ü¶ Œ±.app (f.obj i) }

noncomputable def evalOf : eval C A ‚ãô (whiskeringLeft _ _ A).obj (of C) ‚âÖ Functor.id (C ‚•§ A) :=
  NatIso.ofComponents fun F ‚Ü¶ NatIso.ofComponents
    (fun x ‚Ü¶ ‚ü®Sigma.desc fun _ ‚Ü¶ ùüô _, Sigma.Œπ (fun _ ‚Ü¶ F.obj x) PUnit.unit, by aesop, by simp‚ü©)
    (fun f ‚Ü¶ Sigma.hom_ext _ _ (by simp [Sigma.Œπ_desc]))

variable {A} in
@[simps!] noncomputable
def evalCoproductIso (F : C ‚•§ A) {J : Type w} (f : J ‚Üí FormalCoproduct.{w} C) :
    ((eval C A).obj F).obj (coproduct J f).cocone.pt ‚âÖ ‚àê fun j ‚Ü¶ ((eval C A).obj F).obj (f j) :=
  (sigmaSigmaIso (fun j ‚Ü¶ (f j).I) (fun j x ‚Ü¶ F.obj ((f j).obj x))).symm

lemma comp_evalCoproductIso (F : C ‚•§ A) {J : Type w} (f : J ‚Üí FormalCoproduct.{w} C)
    (j : J) (x : (f j).I) :
    ((eval C A).obj F).map ((ofHomEquiv ((f j).obj x) _).2 ‚ü®Sigma.mk j x, ùüô _‚ü©) ‚â´
        (evalCoproductIso F f).hom =
      Sigma.desc fun _ ‚Ü¶ Sigma.Œπ (fun i ‚Ü¶ F.obj ((f j).obj i)) x ‚â´
        Sigma.Œπ (fun b ‚Ü¶ ‚àê fun i ‚Ü¶ F.obj ((f b).obj i)) j :=
  Sigma.hom_ext _ _ fun _ ‚Ü¶ by simp [ofHomEquiv, Sigma.Œπ_desc]

lemma sigmaComparison_eq (F : C ‚•§ A) {J : Type w} (f : J ‚Üí FormalCoproduct.{w} C) :
    sigmaComparison ((eval C A).obj F) f =
      (evalCoproductIso F f).inv ‚â´ ((eval C A).obj F).map (coproductIsoCoproduct f).inv := by
  refine Sigma.hom_ext _ _ fun j ‚Ü¶ Sigma.hom_ext _ _ fun x ‚Ü¶ ?_
  rw [Œπ_comp_sigmaComparison, ‚Üê Functor.mapIso_inv, ‚Üê Category.assoc, ‚Üê Category.assoc,
    Iso.eq_comp_inv, evalCoproductIso, Iso.symm_inv, sigmaSigmaIso_hom, Category.assoc,
    Category.assoc, Sigma.Œπ_desc, Sigma.Œπ_desc, Functor.mapIso_hom, ‚Üê Functor.map_comp,
    coproductIsoCoproduct_hom, colimit.Œπ_desc]
  simp [coproduct]
  rfl

variable {A} in
theorem preservesCoproductEval (F : C ‚•§ A) {J : Type w} (f : J ‚Üí FormalCoproduct.{w} C) :
    PreservesColimit (Discrete.functor f) ((eval.{w} C A).obj F) := by
  refine CategoryTheory.Limits.PreservesCoproduct.of_iso_comparison _ _ (i := ?_)
  rw [sigmaComparison_eq, ‚Üê Functor.mapIso_inv, ‚Üê Iso.trans_inv, ‚Üê Iso.symm_hom]
  infer_instance

end HasCoproducts


section HasProducts

variable [HasProducts.{w} A]

variable (C) in
@[simps] noncomputable
def evalOp : (C·µí·µñ ‚•§ A) ‚•§ ((FormalCoproduct.{w} C)·µí·µñ ‚•§ A) where
  obj F :=
    { obj X := ‚àè·∂ú fun (i : X.unop.I) ‚Ü¶ F.obj (op (X.unop.obj i))
      map f := Pi.lift fun i ‚Ü¶ Pi.œÄ _ (f.unop.f i) ‚â´ F.map (f.unop.œÜ i).op }
  map Œ± := { app f := Pi.map fun i ‚Ü¶ Œ±.app (op (f.unop.obj i)) }

variable {A} in
noncomputable def evalOpOf :
    evalOp C A ‚ãô (whiskeringLeft _ _ A).obj (of C).op ‚âÖ Functor.id (C·µí·µñ ‚•§ A) :=
  NatIso.ofComponents fun F ‚Ü¶ NatIso.ofComponents fun x ‚Ü¶
    ‚ü®Pi.œÄ _ PUnit.unit, Pi.lift fun _ ‚Ü¶ ùüô _, by aesop, by simp‚ü©

variable {A} in
@[simps!] noncomputable
def evalOpCoproductIso (F : C·µí·µñ ‚•§ A) {J : Type w} (f : J ‚Üí FormalCoproduct.{w} C) :
    ((evalOp C A).obj F).obj (op (coproduct J f).cocone.pt) ‚âÖ
      ‚àè·∂ú fun j ‚Ü¶ ((evalOp C A).obj F).obj (op (f j)) :=
  (piPiIso (fun j ‚Ü¶ (f j).I) (fun j x ‚Ü¶ F.obj (op ((f j).obj x)))).symm

lemma evalOpCoproductIso_comp (F : C·µí·µñ ‚•§ A) {J : Type w} (f : J ‚Üí FormalCoproduct.{w} C) (j : J) :
    (evalOpCoproductIso F f).hom ‚â´ Pi.œÄ _ j =
      ((evalOp C A).obj F).map (op ((coproduct J f).cocone.Œπ.app ‚ü®j‚ü©)) :=
  (Pi.lift_œÄ _ _).trans (by simp [coproduct])

lemma œÄ_eq {J : Type w} (f : J ‚Üí FormalCoproduct.{w} C) (j : J) :
    Pi.œÄ (op ‚àò f) j = (opCoproductIsoProduct _).inv ‚â´ op (colimit.Œπ _ _) :=
  (opCoproductIsoProduct_inv_comp_Œπ _ _).symm

lemma piComparison_eq (F : C·µí·µñ ‚•§ A) {J : Type w} (f : J ‚Üí FormalCoproduct.{w} C) :
    piComparison ((evalOp C A).obj F) (op ‚àò f) =
      ((evalOp C A).obj F).map ((opCoproductIsoProduct _).inv ‚â´ (coproductIsoCoproduct _).op.inv) ‚â´
        (evalOpCoproductIso F f).hom := by
  refine Pi.hom_ext _ _ fun j ‚Ü¶ Pi.hom_ext _ _ fun x ‚Ü¶ ?_
  rw [piComparison_comp_œÄ, evalOp_obj_map, Pi.lift_œÄ, evalOp_obj_map, evalOpCoproductIso_hom,
    Category.assoc, Category.assoc]
  conv => enter [2,2]; rw [‚Üê Category.assoc]; enter [1]; exact Pi.lift_œÄ _ _
  conv => enter [2,2]; exact Pi.lift_œÄ _ _
  refine Eq.symm ((Pi.lift_œÄ _ _).trans ?_)
  congr 1
  ¬∑ congr 3; simp [œÄ_eq]
  ¬∑ congr 1; simp [œÄ_eq]
  ¬∑ congr 1
    ¬∑ rw [œÄ_eq]; rfl
    ¬∑ rw [œÄ_eq]; rfl

variable {A} in
theorem preservesProductEvalOp (F : C·µí·µñ ‚•§ A) {J : Type w} (f : J ‚Üí FormalCoproduct.{w} C) :
    PreservesLimit (Discrete.functor (op ‚àò f)) ((evalOp.{w} C A).obj F) := by
  refine CategoryTheory.Limits.PreservesProduct.of_iso_comparison _ _ (i := ?_)
  rw [piComparison_eq, ‚Üê Iso.trans_inv, ‚Üê Functor.mapIso_inv, ‚Üê Iso.symm_hom]
  infer_instance

end HasProducts


def arrowOfMaps (X : C) {J : Type w} (f : (j : J) ‚Üí C) (œÜ : (j : J) ‚Üí f j ‚ü∂ X) :
    FormalCoproduct.mk _ f ‚ü∂ (of C).obj X :=
  ‚ü®fun _ ‚Ü¶ PUnit.unit, œÜ‚ü©


end FormalCoproduct

end Limits

end CategoryTheory
