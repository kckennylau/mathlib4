/-
Copyright (c) 2025 Kenny Lau. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou, Kenny Lau
-/

import Mathlib.CategoryTheory.Limits.Shapes.Products

/-!
# Formal Products and Coproducts

In this file we construct the category of formal products (and dually, formal coproducts) given
a category.

## Main definitions

* `FormalProduct`: the category of formal products, which are indexed sets of objects in a category.
  A morphism `‚àè i : X.I, X.obj i ‚ü∂ ‚àè j : Y.I, Y.obj j` is given by a function `f : Y.I ‚Üí X.I` and
  maps `X.obj (f i) ‚ü∂ Y.obj i` for each `i : Y.I`.
* `FormalProduct.eval : (C ‚•§ A) ‚•§ (FormalProduct C ‚•§ A)`: the universal property that
  a copresheaf on `C` where the target category has arbitrary products, can be extended to
  a copresheaf on `FormalProduct C`.
* `FormalCoproduct`: the category of formal coproducts, which are indexed sets of objects in a
  category. A morphism `‚àê i : X.I, X.obj i ‚ü∂ ‚àê j : Y.I, Y.obj j` is given by a function
  `f : X.I ‚Üí Y.I` and maps `X.obj i ‚ü∂ Y.obj (f i)` for each `i : X.I`.
* `FormalCoproduct.eval : (C·µí·µñ ‚•§ A) ‚•§ ((FormalCoproduct C)·µí·µñ ‚•§ A)`:
  the universal property that a presheaf on `C` where the target category has arbitrary coproducts,
  can be extended to a presheaf on `FormalCoproduct C`.

-/


universe v v‚ÇÅ v‚ÇÇ v‚ÇÉ w w‚ÇÅ w‚ÇÇ w‚ÇÉ u u‚ÇÅ u‚ÇÇ u‚ÇÉ

open Opposite

namespace CategoryTheory

namespace Limits

variable {C : Type u} [Category.{v} C] (A : Type u‚ÇÅ) [Category.{v‚ÇÅ} A]
  [‚àÄ (I : Type w), HasProductsOfShape I A]

variable (C) in
/-- A formal product is an indexed set of objects. -/
structure FormalProduct where
  I : Type w
  obj (i : I) : C

variable (C) in
/-- A formal coproduct is an indexed set of objects. -/
structure FormalCoproduct where
  I : Type w
  obj (i : I) : C

namespace FormalProduct

structure Hom (X Y : FormalProduct.{w} C) where
  f : Y.I ‚Üí X.I
  œÜ (i : Y.I) : X.obj (f i) ‚ü∂ Y.obj i

-- this category identifies to the fullsubcategory of the category of
-- copresheaves of sets on `C` which are products of corepresentable presheaves
@[simps!] instance category : Category (FormalProduct.{w} C) where
  Hom := Hom
  id X := { f := id, œÜ := fun _ ‚Ü¶ ùüô _ }
  comp Œ± Œ≤ := { f := Œ±.f ‚àò Œ≤.f, œÜ := fun _ ‚Ü¶ Œ±.œÜ _ ‚â´ Œ≤.œÜ _ }

@[ext (iff := false)]
lemma hom_ext {X Y : FormalProduct.{w} C} {f g : X ‚ü∂ Y} (h‚ÇÅ : f.f = g.f)
    (h‚ÇÇ : ‚àÄ (i : Y.I), eqToHom (by rw [h‚ÇÅ]) ‚â´ f.œÜ i = g.œÜ i) : f = g := by
  obtain ‚ü®f, F‚ü© := f
  obtain ‚ü®g, G‚ü© := g
  obtain rfl : f = g := h‚ÇÅ
  obtain rfl : F = G := by ext i; simpa using h‚ÇÇ i
  rfl

lemma hom_ext_iff {X Y : FormalProduct.{w} C} (f g : X ‚ü∂ Y) :
    f = g ‚Üî ‚àÉ h‚ÇÅ : f.f = g.f, ‚àÄ (i : Y.I), eqToHom (by rw [h‚ÇÅ]) ‚â´ f.œÜ i = g.œÜ i :=
  ‚ü®(¬∑ ‚ñ∏ by simp), fun ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© ‚Ü¶ hom_ext h‚ÇÅ h‚ÇÇ‚ü©

@[simps] noncomputable def eval : (C ‚•§ A) ‚•§ (FormalProduct.{w} C ‚•§ A) where
  obj F := {
    obj X := ‚àè·∂ú fun (i : X.I) ‚Ü¶ F.obj (X.obj i)
    map f := Pi.lift fun i ‚Ü¶ Pi.œÄ _ (f.f i) ‚â´ F.map (f.œÜ i)
  }
  map Œ± := {
    app f := Pi.map fun i ‚Ü¶ Œ±.app _
  }

end FormalProduct


namespace FormalCoproduct

structure Hom (X Y : FormalCoproduct.{w} C) where
  f : X.I ‚Üí Y.I
  œÜ (i : X.I) : X.obj i ‚ü∂ Y.obj (f i)

-- this category identifies to the fullsubcategory of the category of
-- presheaves of sets on `C` which are coproducts of representable presheaves
@[simps!] instance category : Category (FormalCoproduct.{w} C) where
  Hom := Hom
  id X := { f := id, œÜ := fun _ ‚Ü¶ ùüô _ }
  comp Œ± Œ≤ := { f := Œ≤.f ‚àò Œ±.f, œÜ := fun _ ‚Ü¶ Œ±.œÜ _ ‚â´ Œ≤.œÜ _ }

@[ext (iff := false)]
lemma hom_ext {X Y : FormalCoproduct.{w} C} {f g : X ‚ü∂ Y} (h‚ÇÅ : f.f = g.f)
    (h‚ÇÇ : ‚àÄ (i : X.I), f.œÜ i ‚â´ eqToHom (by rw [h‚ÇÅ]) = g.œÜ i) : f = g := by
  obtain ‚ü®f, F‚ü© := f
  obtain ‚ü®g, G‚ü© := g
  obtain rfl : f = g := h‚ÇÅ
  obtain rfl : F = G := by ext i; simpa using h‚ÇÇ i
  rfl

@[simps] noncomputable def eval : (C·µí·µñ ‚•§ A) ‚•§ ((FormalCoproduct.{w} C)·µí·µñ ‚•§ A) where
  obj F := {
    obj X := ‚àè·∂ú fun (i : X.unop.I) ‚Ü¶ F.obj (op (X.unop.obj i))
    map f := Pi.lift fun i ‚Ü¶ Pi.œÄ _ (f.unop.f i) ‚â´ F.map (f.unop.œÜ i).op
  }
  map Œ± := {
    app f := Pi.map fun i ‚Ü¶ Œ±.app (op (f.unop.obj i))
  }

end FormalCoproduct


end Limits

end CategoryTheory
